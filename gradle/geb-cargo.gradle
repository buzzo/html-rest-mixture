import org.apache.tools.ant.taskdefs.condition.Os
import org.apache.commons.io.FileUtils

apply plugin: 'com.bmuschko.cargo' // cargo
apply plugin: 'com.github.kt3k.coveralls' // coveralls

buildscript {
	repositories {
		jcenter()
		mavenCentral()
	}
	dependencies { classpath 'commons-io:commons-io:2.4' }
}

repositories { mavenCentral() }

dependencies {
	// spock, need to depend on geb-spock
	testCompile "org.gebish:geb-spock:$gebVersion"
	testCompile("org.spockframework:spock-core:0.7-groovy-2.0") { exclude group: "org.codehaus.groovy" }
	testCompile "org.codehaus.groovy:groovy-all:$groovyVersion"
	// selenium
	testCompile "org.seleniumhq.selenium:selenium-chrome-driver:$seleniumVersion"
	testCompile "org.seleniumhq.selenium:selenium-firefox-driver:$seleniumVersion"
	testCompile("com.github.detro.ghostdriver:phantomjsdriver:1.1.0") { transitive = false  } // phantomjs driver pulls in a different selenium version
	// cargo
	cargo "org.codehaus.cargo:cargo-core-uberjar:$cargoVersion","org.codehaus.cargo:cargo-ant:$cargoVersion"
}

cargo {
	def extractTempDir = File.createTempDir()
	containerId = container
	port = serverPort
	deployable { context = 'myapp' }
	local {
		installer {
			installUrl = containerURL
			downloadDir = file("$buildDir/download")
			extractDir = extractTempDir
		}
		homeDir = extractTempDir
		log = file("$buildDir/jboss.log")
		// jacoco agent for coverage
		jvmArgs = "-javaagent:$buildDir/jacoco/unzip/lib/jacocoagent.jar=destfile=$buildDir/jacoco/test.exec,append=true,dumponexit=true"
	}
}

task downloadJacocoAgent {
	def outputFile = file("$buildDir/jacoco/jacocoagent.zip")
	outputs.file(outputFile)
	FileUtils.copyURLToFile(new URL("https://oss.sonatype.org/service/local/artifact/maven/redirect?r=snapshots&g=org.jacoco&a=jacoco&e=zip&v=LATEST"), outputFile)
}

task unzipJacocoAgent(type: Copy) {
	def outputDir = file("$buildDir/jacoco/unzip")
	dependsOn downloadJacocoAgent
	outputs.dir(outputDir)
	from(zipTree(downloadJacocoAgent.outputs.files.singleFile))
	into(outputDir)
}
