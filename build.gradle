import org.apache.tools.ant.taskdefs.condition.Os


ext {
	ext {
		groovyVersion = '2.3.6'
		// geb
		driver = "firefox"
		gebVersion = '0.10.0'
		seleniumVersion = '2.43.1'
		chromeDriverVersion = '2.10'
		phantomJsVersion = '1.9.7'
		// cargo
		cargoVersion = '1.4.10'
		serverHost = 'localhost'
		serverPort = 9090
		//		container = 'wildfly8x'
		container = 'jboss71x'
		containerURL = 'http://download.jboss.org/jbossas/7.1/jboss-as-7.1.1.Final/jboss-as-7.1.1.Final.zip'
		//		containerURL = 'http://download.jboss.org/wildfly/8.2.0.Final/wildfly-8.2.0.Final.zip'
		// jacoco
		jacocoVersion = '0.7.2.201409121644'
	}
}

apply plugin: 'war'
apply plugin: 'groovy'
apply plugin: 'jacoco'

apply from: "gradle/ide.gradle"
apply from: "gradle/geb-cargo.gradle"

compileJava.options.encoding = 'UTF-8'
sourceCompatibility = 1.7
targetCompatibility = 1.7

buildscript {
	repositories { jcenter() }
	dependencies {
		classpath 'com.bmuschko:gradle-cargo-plugin:2.0.2' // cargo plugin
		classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.0.1' // coveralls plugin
	}
}

repositories {
	mavenCentral()
	maven { url 'https://repository.jboss.org/nexus/content/groups/public-jboss' }
}

dependencies {
	compile "com.google.code.gson:gson:2.3"
	providedCompile "org.jboss.resteasy:resteasy-jaxrs:3.0.4.Final"
	providedCompile "org.jboss.resteasy:resteasy-jackson-provider:3.0.4.Final"
}

jacocoTestReport {
	reports {
		xml.enabled = true // coveralls plugin depends on xml format report
		html.enabled = true
	}
}

test {
	doFirst{
		tasks.unzipJacocoAgent.execute() // copy jacoco agent jar
		tasks.cargoStartLocal.execute() // start server
	}

	jacoco {  enabled = false  } // we don't need jacoco for junit tests, the agent is already set inside wildfly for acceptance tests
	outputs.upToDateWhen { false } // always run tests

	systemProperty "geb.build.reportsDir", reporting.file("$name/geb")
	systemProperty "geb.env", driver
	systemProperty "geb.build.baseUrl", "http://$serverHost:$serverPort/js-rest-crud"

	doLast{
		tasks.cargoStopLocal.execute() // stop server
	}
}
